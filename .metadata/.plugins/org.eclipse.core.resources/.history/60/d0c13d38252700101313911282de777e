package com.ecom.app.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;

import org.springframework.core.io.ClassPathResource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.ecom.app.model.Category;
import com.ecom.app.model.Product;
import com.ecom.app.service.CategoryService;
import com.ecom.app.service.ProductService;

import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping("/admin")
public class AdminController {
	
	@Autowired
	private CategoryService categoryService;
	
	@Autowired
	private ProductService productService;
	
	@GetMapping("/")
	public String index() {
		return "admin/index";
	}
	
	@GetMapping("/product")
	public String product() {
		return "admin/add_product";
	}
	
	@GetMapping("/category")
	public String category(Model m) {
		m.addAttribute("categories", categoryService.getAllCategories());
		return "admin/category";
	}
	
	@PostMapping("/saveCategory")
	public String saveCategory(@ModelAttribute Category category, @RequestParam("file") MultipartFile file, 
			HttpSession session) throws IOException {
		String imageName = !file.isEmpty()  ? file.getOriginalFilename() : "default.jpg";
		category.setImageName(imageName);
		
		Boolean categoryExists = categoryService.categoryExists(category.getName());
		if (categoryExists) {
			session.setAttribute("errorMsg", "Category name already exists");
		} else {
			Category savedCategory  = categoryService.saveCategory(category);
			if (ObjectUtils.isEmpty(savedCategory)) {
				session.setAttribute("errorMsg", "Not saved. Internal server error");
			} else {
				
				try {
					File savedFile =  new ClassPathResource("static/img").getFile();
					Path path = Paths.get(savedFile.getAbsolutePath() + File.separator + "category_img"+ File.separator + file.getOriginalFilename());
			//	Path path = Paths.get(savedFile.getAbsolutePath() + File.separator + "category_img"+ File.separator + file.getOriginalFilename());
					System.out.println(path.toString());
				Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);
				session.setAttribute("succMsg", "Saved successfully");
			
			} catch (IOException e) {
		        session.setAttribute("errorMsg", "Error saving file: " + e.getMessage());
		        e.printStackTrace();
		    }
			
		}
		}
	
		return "redirect:/admin/category";
		
	}
	
	@GetMapping("/deleteCategory/{id}")
	public String deleteCategory(@PathVariable int id, HttpSession session) {
		Boolean deleteCategory = categoryService.deleteCategory(id);
		if (deleteCategory) {
			session.setAttribute("succMsg", "Category Successfully deleted");
		} else {
			session.setAttribute("errorMsg", "Something wrong on server");
		}
		return "redirect:/admin/category";
			
	}

	@GetMapping("/loadCategory/{id}")
	public String loadCategory(@PathVariable int id, Model m)
	{
		m.addAttribute("category",categoryService.getCategoryById(id));
		return "admin/edit_category";
	}
	
	@PostMapping("/updateCategory")
	public String updateCategory(@ModelAttribute Category category, @RequestParam("file") MultipartFile file, HttpSession session) throws IOException {
		Category oldCategory = categoryService.getCategoryById(category.getId());
		String imageName = file.isEmpty() ? oldCategory.getImageName() : file.getOriginalFilename();
		if (!ObjectUtils.isEmpty(category)) {
			oldCategory.setName(category.getName());
			oldCategory.setIsActive(category.getIsActive());
			oldCategory.setImageName(imageName);
		}
		Category updateCategory = categoryService.saveCategory(oldCategory);
		
		if (!ObjectUtils.isEmpty(updateCategory)) {
			
			if (!file.isEmpty()) {
				File savedFile =  new ClassPathResource("static/img").getFile();
				Path path = Paths.get(savedFile.getAbsolutePath() + File.separator + "category_img"+ File.separator + file.getOriginalFilename());
		//	Path path = Paths.get(savedFile.getAbsolutePath() + File.separator + "category_img"+ File.separator + file.getOriginalFilename());
				System.out.println(path.toString());
			Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);
			}
			session.setAttribute("succMsg","Category updated Successfully");
		}
		else {
			session.setAttribute("errorMsg","Something wrong on server");
		}
		return "redirect:/admin/loadCategory/"+category.getId();
		
	}
	
	@GetMapping("/loadAddProduct")
	public String loadAddProduct(Model m) {
		List<Category> categories = categoryService.getAllCategories();
		m.addAttribute("categories", categories);
		return "admin/add_product";
	}
	
	
	@PostMapping("/saveProduct")
	public String saveProduct(@ModelAttribute Product product, HttpSession session) {
		Product saveProduct = product
		
	}

}
