package com.example.kafka_streams_demo;

import java.util.Properties;

import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Produced;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

//Configuration file
@Configuration
public class KafkaStreamsConfig {
	
	@Bean 
	public KafkaStreams kafkaStreams() {
	       Properties props = new Properties();
	       props.put(StreamsConfig.APPLICATION_ID_CONFIG, "my-streams-app");
	       props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
	       props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, org.apache.kafka.common.serialization.Serdes.String().getClass().getName());
	 props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, org.apache.kafka.common.serialization.Serdes.String().getClass().getName());


	       StreamsBuilder builder = new StreamsBuilder();


	       // Create a KStream from the input topic
	       KStream<String, String> sourceStream = builder.stream("input-topic");


	       // Process the stream (e.g., convert all values to uppercase)
	       KStream<String, String> processedStream = sourceStream.mapValues(value -> value.toUpperCase());




	       // Write the processed stream to the output topic
	       processedStream.to("output-topic", Produced.with(org.apache.kafka.common.serialization.Serdes.String(), org.apache.kafka.common.serialization.Serdes.String()));


	       KafkaStreams streams = new KafkaStreams(builder.build(), new StreamsConfig(props));
	       streams.start();


	       return streams;
	   }


}
